// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_modular_bloc_crud/test/product_bloc_unit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter_modular_bloc_crud/database/memory_provider.dart' as _i2;
import 'package:flutter_modular_bloc_crud/modules/product_module/models/product.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [MemoryProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemoryProvider extends _i1.Mock implements _i2.MemoryProvider {
  MockMemoryProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Product> get products =>
      (super.noSuchMethod(Invocation.getter(#products),
          returnValue: <_i3.Product>[]) as List<_i3.Product>);
  @override
  set products(List<_i3.Product>? _products) =>
      super.noSuchMethod(Invocation.setter(#products, _products),
          returnValueForMissingStub: null);
  @override
  _i4.Future<bool> addOrUpdate(_i3.Product? value) =>
      (super.noSuchMethod(Invocation.method(#addOrUpdate, [value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> delete(_i3.Product? value) =>
      (super.noSuchMethod(Invocation.method(#delete, [value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i3.Product>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<List<_i3.Product>>.value(<_i3.Product>[]))
          as _i4.Future<List<_i3.Product>>);
}
